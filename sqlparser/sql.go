// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const FULLTEXT = 57363
const KEY_BLOCK_SIZE = 57364
const NGRAM = 57365
const PARSER = 57366
const SPATIAL = 57367
const UNIQUE = 57368
const KEY = 57369
const ALL = 57370
const DISTINCT = 57371
const AS = 57372
const EXISTS = 57373
const ASC = 57374
const DESC = 57375
const INTO = 57376
const DUPLICATE = 57377
const DEFAULT = 57378
const SET = 57379
const LOCK = 57380
const FULL = 57381
const CHECKSUM = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const JOIN = 57391
const STRAIGHT_JOIN = 57392
const LEFT = 57393
const RIGHT = 57394
const INNER = 57395
const OUTER = 57396
const CROSS = 57397
const NATURAL = 57398
const USE = 57399
const FORCE = 57400
const ON = 57401
const ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const MODIFY = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const USING = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const BIT = 57467
const TINYINT = 57468
const SMALLINT = 57469
const MEDIUMINT = 57470
const INT = 57471
const INTEGER = 57472
const BIGINT = 57473
const INTNUM = 57474
const REAL = 57475
const DOUBLE = 57476
const FLOAT_TYPE = 57477
const DECIMAL = 57478
const NUMERIC = 57479
const TIME = 57480
const TIMESTAMP = 57481
const DATETIME = 57482
const YEAR = 57483
const CHAR = 57484
const VARCHAR = 57485
const BOOL = 57486
const CHARACTER = 57487
const VARBINARY = 57488
const NCHAR = 57489
const CHARSET = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const GEOMETRY = 57501
const POINT = 57502
const LINESTRING = 57503
const POLYGON = 57504
const GEOMETRYCOLLECTION = 57505
const MULTIPOINT = 57506
const MULTILINESTRING = 57507
const MULTIPOLYGON = 57508
const NULLX = 57509
const AUTO_INCREMENT = 57510
const APPROXNUM = 57511
const SIGNED = 57512
const UNSIGNED = 57513
const ZEROFILL = 57514
const FIXED = 57515
const DYNAMIC = 57516
const STORAGE = 57517
const DISK = 57518
const MEMORY = 57519
const COLUMN_FORMAT = 57520
const AVG_ROW_LENGTH = 57521
const COMPRESSION = 57522
const CONNECTION = 57523
const DATA = 57524
const DIRECTORY = 57525
const DELAY_KEY_WRITE = 57526
const ENCRYPTION = 57527
const INSERT_METHOD = 57528
const MAX_ROWS = 57529
const MIN_ROWS = 57530
const PACK_KEYS = 57531
const PASSWORD = 57532
const ROW_FORMAT = 57533
const STATS_AUTO_RECALC = 57534
const STATS_PERSISTENT = 57535
const STATS_SAMPLE_PAGES = 57536
const TABLESPACE = 57537
const COMPRESSED = 57538
const REDUNDANT = 57539
const COMPACT = 57540
const TOKUDB_DEFAULT = 57541
const TOKUDB_FAST = 57542
const TOKUDB_SMALL = 57543
const TOKUDB_ZLIB = 57544
const TOKUDB_QUICKLZ = 57545
const TOKUDB_LZMA = 57546
const TOKUDB_SNAPPY = 57547
const TOKUDB_UNCOMPRESSED = 57548
const DATABASES = 57549
const TABLES = 57550
const WARNINGS = 57551
const VARIABLES = 57552
const EVENTS = 57553
const BINLOG = 57554
const GTID = 57555
const STATUS = 57556
const COLUMNS = 57557
const FIELDS = 57558
const CURRENT_TIMESTAMP = 57559
const DATABASE = 57560
const CURRENT_DATE = 57561
const CURRENT_TIME = 57562
const LOCALTIME = 57563
const LOCALTIMESTAMP = 57564
const UTC_DATE = 57565
const UTC_TIME = 57566
const UTC_TIMESTAMP = 57567
const REPLACE = 57568
const CONVERT = 57569
const CAST = 57570
const GROUP_CONCAT = 57571
const SEPARATOR = 57572
const MATCH = 57573
const AGAINST = 57574
const BOOLEAN = 57575
const LANGUAGE = 57576
const WITH = 57577
const QUERY = 57578
const EXPANSION = 57579
const UNUSED = 57580
const PARTITION = 57581
const PARTITIONS = 57582
const HASH = 57583
const LIST = 57584
const XA = 57585
const DISTRIBUTED = 57586
const ENGINES = 57587
const VERSIONS = 57588
const PROCESSLIST = 57589
const QUERYZ = 57590
const TXNZ = 57591
const KILL = 57592
const ENGINE = 57593
const SINGLE = 57594
const BEGIN = 57595
const START = 57596
const TRANSACTION = 57597
const COMMIT = 57598
const ROLLBACK = 57599
const GLOBAL = 57600
const LOCAL = 57601
const SESSION = 57602
const NAMES = 57603
const ISOLATION = 57604
const LEVEL = 57605
const READ = 57606
const WRITE = 57607
const ONLY = 57608
const REPEATABLE = 57609
const COMMITTED = 57610
const UNCOMMITTED = 57611
const SERIALIZABLE = 57612
const RADON = 57613
const ATTACH = 57614
const ATTACHLIST = 57615
const DETACH = 57616
const RESHARD = 57617
const CLEANUP = 57618

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"NGRAM",
	"PARSER",
	"SPATIAL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4618

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 211,
	87, 814,
	-2, 630,
	-1, 217,
	87, 676,
	-2, 608,
	-1, 448,
	115, 660,
	-2, 656,
	-1, 449,
	115, 661,
	-2, 657,
	-1, 483,
	112, 79,
	162, 79,
	165, 79,
	-2, 90,
	-1, 533,
	1, 73,
	294, 73,
	-2, 79,
	-1, 650,
	5, 27,
	-2, 579,
	-1, 684,
	112, 79,
	162, 79,
	165, 79,
	-2, 91,
	-1, 796,
	1, 74,
	294, 74,
	-2, 79,
	-1, 883,
	115, 663,
	-2, 659,
	-1, 1046,
	5, 28,
	-2, 458,
	-1, 1070,
	5, 28,
	-2, 580,
	-1, 1200,
	5, 27,
	-2, 582,
	-1, 1329,
	5, 28,
	-2, 583,
}

const yyPrivate = 57344

const yyLast = 9924

var yyAct = [...]int{

	449, 1363, 1401, 1207, 1370, 1338, 426, 1226, 1334, 1345,
	1215, 653, 1344, 1190, 556, 212, 1259, 1273, 397, 1191,
	912, 980, 186, 792, 936, 913, 663, 1270, 56, 1170,
	1039, 779, 773, 867, 877, 402, 882, 66, 99, 216,
	404, 874, 909, 345, 893, 610, 3, 1031, 654, 344,
	427, 50, 844, 824, 559, 876, 713, 940, 748, 468,
	797, 685, 208, 451, 99, 391, 220, 469, 347, 741,
	207, 467, 457, 400, 621, 55, 205, 549, 1079, 788,
	99, 99, 195, 471, 389, 176, 178, 177, 179, 180,
	1080, 1081, 672, 673, 671, 470, 185, 99, 726, 929,
	173, 50, 928, 341, 470, 930, 471, 95, 342, 191,
	680, 681, 736, 424, 1393, 1282, 718, 1335, 1421, 1400,
	24, 51, 26, 27, 170, 1420, 1380, 1418, 1365, 1399,
	1379, 94, 1183, 1253, 1347, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 46, 711, 588,
	362, 28, 1136, 373, 36, 70, 1137, 1138, 366, 71,
	73, 76, 77, 361, 821, 368, 369, 475, 971, 972,
	973, 37, 949, 948, 53, 1214, 974, 990, 1366, 215,
	99, 986, 772, 383, 385, 1000, 82, 985, 1155, 780,
	1248, 1302, 1246, 89, 1014, 1013, 1012, 1365, 561, 356,
	99, 349, 722, 99, 1324, 1326, 1009, 75, 220, 561,
	1011, 745, 1106, 939, 220, 220, 745, 60, 453, 1357,
	588, 1356, 1355, 1049, 352, 351, 350, 384, 384, 354,
	96, 879, 30, 31, 32, 942, 34, 454, 941, 565,
	564, 80, 50, 62, 63, 64, 65, 1366, 35, 47,
	39, 79, 965, 48, 49, 33, 566, 600, 601, 72,
	363, 716, 1140, 942, 1280, 1238, 941, 1073, 1045, 1043,
	472, 78, 717, 719, 720, 721, 1325, 723, 724, 725,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 1348,
	780, 1232, 83, 1050, 93, 91, 560, 81, 922, 88,
	609, 464, 679, 1405, 563, 1008, 1367, 560, 565, 564,
	744, 171, 1141, 578, 566, 744, 588, 826, 1230, 565,
	564, 215, 937, 1010, 1378, 566, 1187, 476, 476, 1185,
	84, 92, 86, 87, 90, 921, 566, 975, 987, 988,
	474, 983, 984, 894, 712, 715, 851, 534, 970, 99,
	348, 714, 1392, 459, 99, 99, 99, 52, 1374, 99,
	849, 850, 848, 99, 99, 1406, 1108, 1107, 1231, 68,
	564, 894, 1365, 1056, 38, 581, 582, 583, 584, 585,
	578, 40, 479, 588, 41, 42, 566, 44, 43, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	568, 825, 45, 1332, 1024, 1025, 1026, 636, 637, 1225,
	455, 579, 580, 581, 582, 583, 584, 585, 578, 394,
	452, 588, 1366, 353, 602, 603, 604, 605, 606, 607,
	586, 587, 579, 580, 581, 582, 583, 584, 585, 578,
	598, 355, 588, 1292, 567, 1224, 53, 1293, 1102, 597,
	599, 552, 565, 564, 1101, 1051, 847, 220, 1100, 1097,
	565, 564, 99, 1092, 981, 99, 982, 220, 1091, 566,
	1125, 868, 1090, 869, 1390, 608, 638, 566, 611, 612,
	613, 614, 615, 616, 617, 347, 620, 622, 622, 622,
	622, 622, 622, 622, 622, 630, 631, 632, 633, 655,
	1124, 658, 565, 564, 660, 1123, 650, 998, 997, 991,
	381, 651, 623, 624, 625, 626, 627, 628, 629, 566,
	358, 1305, 1223, 1213, 1121, 775, 776, 777, 778, 781,
	782, 783, 1212, 682, 737, 1122, 1105, 666, 640, 639,
	785, 786, 787, 665, 99, 674, 1104, 837, 839, 840,
	1098, 99, 99, 838, 1120, 1094, 794, 1093, 1085, 1018,
	99, 1017, 416, 415, 417, 418, 419, 420, 820, 996,
	642, 421, 978, 1412, 390, 390, 1103, 656, 845, 1360,
	215, 1261, 1264, 1265, 1266, 1262, 1228, 1263, 1267, 843,
	798, 1352, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 1299, 220, 790,
	791, 1157, 846, 1227, 1358, 390, 557, 1285, 1341, 1285,
	1340, 220, 1285, 1337, 1342, 881, 1257, 390, 569, 577,
	576, 586, 587, 579, 580, 581, 582, 583, 584, 585,
	578, 831, 1154, 588, 1285, 390, 1285, 1289, 1295, 883,
	50, 1133, 220, 1285, 1288, 1294, 914, 885, 1132, 557,
	911, 1129, 611, 1285, 1284, 1139, 619, 220, 886, 887,
	1037, 390, 890, 898, 871, 872, 1146, 1145, 1143, 1142,
	919, 1099, 966, 347, 655, 931, 897, 870, 899, 900,
	891, 537, 923, 1072, 390, 884, 536, 916, 901, 535,
	915, 908, 50, 357, 902, 830, 677, 896, 74, 576,
	586, 587, 579, 580, 581, 582, 583, 584, 585, 578,
	57, 873, 588, 215, 830, 390, 934, 484, 483, 472,
	926, 932, 933, 24, 895, 24, 925, 938, 910, 920,
	920, 943, 944, 945, 946, 947, 935, 1065, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 664, 656, 1068, 648, 918, 24, 1037, 649, 815,
	1199, 199, 1261, 1264, 1265, 1266, 1262, 1257, 1263, 1267,
	215, 1144, 1037, 818, 192, 670, 668, 53, 53, 53,
	1171, 814, 634, 466, 774, 793, 834, 835, 1037, 841,
	842, 99, 99, 99, 1222, 1221, 969, 992, 993, 1220,
	964, 920, 967, 968, 1173, 1354, 1217, 67, 817, 99,
	53, 1131, 1130, 1128, 789, 784, 1351, 813, 910, 425,
	1175, 802, 1179, 801, 1174, 800, 1172, 646, 53, 765,
	764, 1177, 543, 557, 22, 1317, 888, 889, 1353, 761,
	1318, 1176, 1314, 798, 1313, 845, 1001, 999, 1315, 1006,
	833, 196, 197, 1316, 1178, 1180, 452, 97, 1028, 1029,
	1030, 1410, 767, 1398, 810, 808, 804, 1023, 807, 809,
	220, 1319, 1020, 1265, 1266, 766, 759, 1388, 458, 846,
	907, 906, 760, 201, 1396, 392, 924, 1236, 1089, 994,
	480, 1027, 456, 190, 99, 463, 736, 1066, 1269, 201,
	201, 799, 542, 1395, 458, 393, 1197, 812, 193, 194,
	977, 976, 963, 1397, 1409, 768, 201, 905, 187, 1308,
	482, 1036, 1044, 347, 347, 904, 481, 1055, 1077, 188,
	811, 57, 1307, 1256, 664, 763, 1078, 1053, 1074, 550,
	551, 546, 202, 1277, 1067, 1034, 655, 979, 562, 1035,
	1086, 59, 883, 1127, 1087, 1088, 61, 54, 1, 1075,
	1046, 1047, 1048, 1095, 1096, 1052, 1082, 1083, 1333, 796,
	1058, 795, 1059, 1060, 1061, 1062, 747, 746, 1391, 69,
	1362, 1394, 1364, 1041, 1372, 684, 683, 343, 762, 806,
	1069, 1070, 1071, 738, 995, 770, 753, 99, 769, 201,
	816, 752, 751, 749, 989, 347, 771, 1229, 758, 1084,
	757, 678, 710, 805, 709, 1147, 1148, 708, 707, 201,
	706, 705, 201, 704, 656, 703, 215, 702, 701, 700,
	699, 220, 698, 697, 696, 695, 220, 694, 693, 692,
	1156, 1161, 1162, 1149, 1150, 1151, 691, 686, 1019, 881,
	690, 1169, 1021, 689, 1158, 688, 99, 1281, 687, 756,
	754, 1165, 1164, 220, 220, 914, 1159, 750, 489, 487,
	1167, 1182, 1184, 883, 1181, 220, 1168, 488, 486, 491,
	490, 1188, 485, 1189, 1198, 1268, 1272, 1204, 1038, 1007,
	1209, 803, 596, 903, 1135, 213, 1194, 927, 669, 1210,
	1211, 667, 204, 203, 917, 635, 1195, 1200, 450, 915,
	1306, 1163, 1201, 1255, 1054, 618, 1057, 892, 403, 220,
	836, 220, 220, 414, 411, 1208, 413, 412, 641, 647,
	570, 401, 395, 1323, 1193, 540, 367, 557, 85, 460,
	220, 220, 220, 1076, 1041, 1260, 1258, 215, 1192, 215,
	1064, 545, 1252, 1346, 645, 755, 1134, 1205, 1206, 25,
	58, 198, 14, 21, 15, 13, 12, 29, 533, 1237,
	10, 9, 8, 201, 201, 201, 1202, 1203, 544, 7,
	6, 5, 201, 201, 4, 189, 99, 99, 215, 1244,
	23, 2, 20, 19, 1241, 1242, 914, 1243, 18, 17,
	1245, 16, 1247, 11, 0, 0, 0, 0, 220, 0,
	1278, 220, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1251, 0, 1194, 0, 0, 220,
	0, 0, 1216, 0, 1216, 1216, 1271, 1279, 0, 1286,
	915, 0, 50, 1239, 1169, 1240, 0, 1283, 99, 99,
	99, 99, 0, 1216, 1216, 1216, 1249, 1250, 0, 99,
	1303, 1309, 99, 1311, 1301, 99, 0, 0, 1310, 0,
	1312, 220, 220, 0, 1320, 1331, 220, 0, 1186, 1328,
	0, 201, 1327, 657, 659, 1339, 1336, 1209, 1194, 1194,
	1194, 1194, 1343, 0, 0, 0, 1218, 1219, 1195, 1195,
	1195, 1195, 1194, 655, 0, 0, 0, 885, 1296, 1297,
	1298, 0, 1271, 1350, 0, 1233, 1234, 1235, 0, 0,
	0, 1216, 1208, 0, 1216, 1216, 0, 1304, 0, 0,
	0, 0, 0, 1361, 0, 0, 1373, 1376, 0, 1371,
	1375, 1369, 215, 1368, 0, 1322, 0, 0, 0, 0,
	220, 0, 0, 1387, 1329, 0, 0, 1386, 0, 0,
	1373, 1376, 0, 201, 0, 1209, 0, 0, 0, 0,
	201, 201, 0, 0, 220, 220, 220, 1403, 1404, 201,
	1389, 656, 0, 1287, 1330, 215, 1290, 1291, 0, 1216,
	0, 0, 0, 0, 0, 0, 1383, 1384, 1385, 0,
	1208, 0, 1415, 220, 0, 1416, 1417, 0, 1359, 1254,
	1407, 1408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1377, 0, 0, 0, 0, 1196, 0, 880, 659,
	0, 0, 880, 880, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 384, 0, 0, 0,
	880, 880, 880, 880, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 880, 0, 0, 657, 0,
	0, 0, 0, 0, 0, 0, 1411, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 1402, 1402, 1402,
	200, 0, 0, 0, 169, 0, 172, 0, 174, 175,
	0, 181, 182, 183, 184, 0, 359, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 379, 0, 0, 0, 0, 0, 1349,
	557, 0, 0, 0, 0, 0, 0, 0, 364, 365,
	0, 370, 371, 372, 0, 374, 375, 376, 377, 378,
	577, 576, 586, 587, 579, 580, 581, 582, 583, 584,
	585, 578, 0, 0, 588, 0, 0, 0, 0, 0,
	0, 0, 0, 1381, 1382, 572, 0, 575, 0, 0,
	0, 0, 0, 589, 590, 591, 592, 593, 594, 595,
	1032, 573, 574, 571, 577, 576, 586, 587, 579, 580,
	581, 582, 583, 584, 585, 578, 387, 0, 588, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 201, 201, 0, 0, 380, 462, 0, 382, 465,
	0, 0, 0, 386, 506, 388, 0, 0, 201, 519,
	522, 523, 524, 525, 526, 527, 0, 528, 529, 530,
	531, 532, 507, 508, 509, 510, 492, 493, 520, 0,
	495, 0, 1160, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 511, 512, 513, 514, 515, 516, 517,
	518, 0, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 0, 880, 588, 0, 0, 0,
	0, 0, 0, 0, 1033, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 577, 576, 586, 587, 579, 580,
	581, 582, 583, 584, 585, 578, 0, 0, 588, 0,
	657, 0, 659, 0, 0, 0, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 539, 541, 0, 0, 0, 0, 0, 0, 547,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 554, 0, 555, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 659, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 827, 828, 0,
	143, 0, 101, 0, 125, 131, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 822, 823, 0, 133, 0, 829, 151, 136,
	0, 0, 0, 0, 0, 201, 1275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 576, 586, 587, 579, 580, 581, 582, 583,
	584, 585, 578, 0, 0, 588, 0, 201, 201, 201,
	201, 0, 0, 0, 0, 0, 0, 0, 1321, 0,
	161, 201, 0, 0, 1275, 0, 0, 657, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 0, 0,
	152, 0, 0, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 1003, 1004,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 163, 164, 166, 165, 167, 106, 0, 1005, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 324, 309, 269, 327, 245, 260,
	339, 262, 263, 299, 229, 279, 143, 258, 101, 0,
	125, 131, 0, 0, 0, 325, 276, 0, 248, 222,
	255, 223, 246, 273, 117, 244, 311, 282, 261, 0,
	333, 133, 291, 0, 151, 136, 0, 0, 275, 314,
	277, 308, 268, 300, 237, 290, 328, 259, 296, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 293, 322, 257, 295, 298, 221, 292, 0,
	225, 230, 338, 320, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 274, 278, 305, 266, 0, 0, 0,
	0, 0, 0, 1152, 0, 249, 0, 289, 0, 0,
	0, 232, 227, 272, 0, 0, 0, 236, 0, 250,
	306, 0, 0, 0, 315, 267, 161, 321, 265, 264,
	329, 302, 1153, 312, 247, 256, 111, 254, 149, 297,
	159, 103, 318, 313, 287, 270, 271, 226, 0, 304,
	116, 124, 243, 294, 157, 158, 112, 162, 231, 335,
	104, 218, 334, 142, 217, 156, 319, 288, 284, 228,
	317, 286, 283, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 0, 224, 0, 152, 326, 340, 123,
	118, 155, 115, 137, 108, 102, 234, 109, 110, 114,
	113, 0, 129, 135, 138, 144, 145, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 316, 0, 0, 0, 0, 0,
	154, 233, 122, 240, 241, 238, 239, 280, 281, 330,
	331, 332, 307, 235, 0, 0, 310, 285, 100, 105,
	132, 337, 148, 121, 160, 0, 0, 0, 0, 0,
	0, 253, 336, 303, 301, 323, 0, 120, 153, 0,
	0, 206, 0, 0, 211, 209, 210, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 164, 166,
	165, 167, 106, 324, 309, 269, 327, 245, 260, 339,
	262, 263, 299, 229, 279, 143, 258, 101, 0, 125,
	131, 0, 0, 0, 325, 276, 0, 248, 222, 255,
	223, 246, 273, 117, 244, 311, 282, 261, 0, 333,
	133, 291, 0, 151, 136, 0, 0, 275, 314, 277,
	308, 268, 300, 237, 290, 328, 259, 296, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 293, 322, 257, 295, 298, 221, 292, 0, 225,
	230, 338, 320, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 274, 278, 305, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 289, 0, 0, 0,
	232, 227, 272, 0, 0, 0, 236, 0, 250, 306,
	0, 0, 0, 315, 267, 161, 321, 265, 264, 329,
	302, 0, 312, 247, 256, 111, 254, 149, 297, 159,
	103, 318, 313, 287, 270, 271, 226, 0, 304, 116,
	124, 243, 294, 157, 158, 112, 162, 231, 335, 104,
	218, 334, 142, 217, 156, 319, 288, 284, 228, 317,
	286, 283, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 224, 0, 152, 326, 340, 123, 118,
	155, 115, 137, 108, 102, 234, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 316, 0, 0, 0, 0, 0, 154,
	233, 122, 240, 241, 238, 239, 280, 281, 330, 331,
	332, 307, 235, 0, 0, 310, 285, 100, 105, 132,
	337, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	253, 336, 303, 301, 323, 0, 120, 153, 0, 0,
	0, 0, 0, 211, 209, 210, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 324, 309, 269, 327, 245, 260, 339, 262,
	263, 299, 229, 279, 143, 258, 101, 0, 125, 131,
	0, 0, 0, 325, 276, 0, 248, 222, 255, 223,
	246, 273, 117, 244, 311, 282, 261, 0, 333, 133,
	291, 0, 151, 136, 0, 0, 275, 314, 277, 308,
	268, 300, 237, 290, 328, 259, 296, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	293, 322, 257, 295, 298, 221, 292, 0, 225, 230,
	338, 320, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 274, 278, 305, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 289, 0, 0, 0, 232,
	227, 272, 0, 0, 0, 236, 0, 250, 306, 0,
	0, 0, 315, 267, 161, 321, 265, 264, 329, 302,
	0, 312, 247, 256, 111, 254, 149, 297, 159, 103,
	318, 313, 287, 270, 271, 226, 0, 304, 116, 124,
	243, 294, 157, 158, 112, 162, 231, 335, 104, 218,
	334, 142, 217, 156, 319, 288, 284, 228, 317, 286,
	283, 130, 119, 126, 146, 134, 147, 127, 140, 139,
	141, 0, 224, 0, 152, 326, 340, 123, 118, 155,
	115, 137, 108, 102, 234, 109, 110, 114, 113, 0,
	129, 135, 138, 144, 145, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 242, 316, 0, 0, 0, 0, 0, 154, 233,
	122, 240, 241, 238, 239, 280, 281, 330, 331, 332,
	307, 235, 0, 0, 310, 285, 100, 105, 132, 337,
	148, 121, 160, 0, 0, 0, 0, 0, 0, 253,
	336, 303, 301, 323, 0, 120, 153, 0, 0, 473,
	0, 0, 128, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 164, 166, 165, 167,
	106, 324, 309, 269, 327, 245, 260, 339, 262, 263,
	299, 229, 279, 143, 258, 101, 0, 125, 131, 0,
	0, 0, 325, 276, 0, 248, 222, 255, 223, 246,
	273, 117, 244, 311, 282, 261, 0, 333, 133, 291,
	0, 151, 136, 0, 0, 275, 314, 277, 308, 268,
	300, 237, 290, 328, 259, 296, 53, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 293,
	322, 257, 295, 298, 221, 292, 0, 225, 230, 338,
	320, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	274, 278, 305, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 289, 0, 0, 0, 232, 227,
	272, 0, 0, 0, 236, 0, 250, 306, 0, 0,
	0, 315, 267, 161, 321, 265, 264, 329, 302, 0,
	312, 247, 256, 111, 254, 149, 297, 159, 103, 318,
	313, 287, 270, 271, 226, 0, 304, 116, 124, 243,
	294, 157, 158, 112, 162, 231, 335, 104, 661, 334,
	142, 662, 156, 319, 288, 284, 228, 317, 286, 283,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	0, 224, 0, 152, 326, 340, 123, 118, 155, 115,
	137, 108, 102, 234, 109, 110, 114, 113, 0, 129,
	135, 138, 144, 145, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 316, 0, 0, 0, 0, 0, 154, 233, 122,
	240, 241, 238, 239, 280, 281, 330, 331, 332, 307,
	235, 0, 0, 310, 285, 100, 105, 132, 337, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 253, 336,
	303, 301, 323, 0, 120, 153, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 166, 165, 167, 106,
	324, 309, 269, 327, 245, 260, 339, 262, 263, 299,
	229, 279, 143, 258, 101, 0, 125, 131, 0, 0,
	0, 325, 276, 0, 248, 222, 255, 223, 246, 273,
	117, 244, 311, 282, 261, 0, 333, 133, 291, 0,
	151, 136, 0, 0, 275, 314, 277, 308, 268, 300,
	237, 290, 328, 259, 296, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 293, 322,
	257, 295, 298, 221, 292, 0, 225, 230, 338, 320,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 274,
	278, 305, 266, 0, 0, 0, 0, 0, 0, 1300,
	0, 249, 0, 289, 0, 0, 0, 232, 227, 272,
	0, 0, 0, 236, 0, 250, 306, 0, 0, 0,
	315, 267, 161, 321, 265, 264, 329, 302, 0, 312,
	247, 256, 111, 254, 149, 297, 159, 103, 318, 313,
	287, 270, 271, 226, 0, 304, 116, 124, 243, 294,
	157, 158, 112, 162, 231, 335, 104, 661, 334, 142,
	662, 156, 319, 288, 284, 228, 317, 286, 283, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	224, 0, 152, 326, 340, 123, 118, 155, 115, 137,
	108, 102, 234, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	316, 0, 0, 0, 0, 0, 154, 233, 122, 240,
	241, 238, 239, 280, 281, 330, 331, 332, 307, 235,
	0, 0, 310, 285, 100, 105, 132, 337, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 253, 336, 303,
	301, 323, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 324,
	309, 269, 327, 245, 260, 339, 262, 263, 299, 229,
	279, 143, 258, 101, 0, 125, 131, 0, 0, 0,
	325, 276, 0, 248, 222, 255, 223, 246, 273, 117,
	244, 311, 282, 261, 0, 333, 133, 291, 0, 151,
	136, 0, 0, 275, 314, 277, 308, 268, 300, 237,
	290, 328, 259, 296, 0, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 293, 322, 257,
	295, 298, 221, 292, 0, 225, 230, 338, 320, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 274, 278,
	305, 266, 0, 0, 0, 0, 0, 0, 1166, 0,
	249, 0, 289, 0, 0, 0, 232, 227, 272, 0,
	0, 0, 236, 0, 250, 306, 0, 0, 0, 315,
	267, 161, 321, 265, 264, 329, 302, 0, 312, 247,
	256, 111, 254, 149, 297, 159, 103, 318, 313, 287,
	270, 271, 226, 0, 304, 116, 124, 243, 294, 157,
	158, 112, 162, 231, 335, 104, 661, 334, 142, 662,
	156, 319, 288, 284, 228, 317, 286, 283, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 224,
	0, 152, 326, 340, 123, 118, 155, 115, 137, 108,
	102, 234, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 242, 316,
	0, 0, 0, 0, 0, 154, 233, 122, 240, 241,
	238, 239, 280, 281, 330, 331, 332, 307, 235, 0,
	0, 310, 285, 100, 105, 132, 337, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 253, 336, 303, 301,
	323, 0, 120, 153, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 166, 165, 167, 106, 324, 309,
	269, 327, 245, 260, 339, 262, 263, 299, 229, 279,
	143, 258, 101, 0, 125, 131, 0, 0, 0, 325,
	276, 0, 248, 222, 255, 223, 246, 273, 117, 244,
	311, 282, 261, 0, 333, 133, 291, 0, 151, 136,
	0, 0, 275, 314, 277, 308, 268, 300, 237, 290,
	328, 259, 296, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 293, 322, 257, 295,
	298, 221, 292, 0, 225, 230, 338, 320, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 274, 278, 305,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 289, 0, 0, 0, 232, 227, 272, 0, 0,
	0, 236, 0, 250, 306, 0, 0, 0, 315, 267,
	161, 321, 265, 264, 329, 302, 0, 312, 247, 256,
	111, 254, 149, 297, 159, 103, 318, 313, 287, 270,
	271, 226, 0, 304, 116, 124, 243, 294, 157, 158,
	112, 162, 231, 335, 104, 218, 334, 142, 217, 156,
	319, 288, 284, 228, 317, 286, 283, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 0, 224, 0,
	152, 326, 340, 123, 118, 155, 115, 137, 108, 102,
	234, 109, 110, 114, 113, 0, 129, 135, 138, 144,
	145, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 242, 316, 0,
	0, 0, 0, 0, 154, 233, 122, 240, 241, 238,
	239, 280, 281, 330, 331, 332, 307, 235, 0, 0,
	310, 285, 100, 105, 132, 337, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 253, 336, 303, 301, 323,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 164, 166, 165, 167, 106, 324, 309, 269,
	327, 245, 260, 339, 262, 263, 299, 229, 279, 143,
	258, 101, 0, 125, 131, 0, 0, 0, 325, 276,
	0, 248, 222, 255, 223, 246, 273, 117, 244, 311,
	282, 261, 0, 333, 133, 291, 0, 151, 136, 0,
	0, 275, 314, 277, 308, 268, 300, 237, 290, 328,
	259, 296, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 293, 322, 257, 295, 298,
	221, 292, 0, 225, 230, 338, 320, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 274, 278, 305, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	289, 0, 0, 0, 232, 227, 272, 0, 0, 0,
	236, 0, 250, 306, 0, 0, 0, 315, 267, 161,
	321, 265, 264, 329, 302, 0, 312, 247, 256, 111,
	254, 149, 297, 159, 103, 318, 313, 287, 270, 271,
	226, 0, 304, 116, 124, 243, 294, 157, 158, 112,
	162, 231, 335, 104, 661, 334, 142, 662, 156, 319,
	288, 284, 228, 317, 286, 283, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 224, 0, 152,
	326, 340, 123, 118, 155, 115, 137, 108, 102, 234,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 316, 0, 0,
	0, 0, 0, 154, 233, 122, 240, 241, 238, 239,
	280, 281, 330, 331, 332, 307, 235, 0, 0, 310,
	285, 100, 105, 132, 337, 148, 121, 160, 0, 0,
	0, 0, 0, 0, 253, 336, 303, 301, 323, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 324, 309, 269, 327,
	245, 260, 339, 262, 263, 299, 229, 279, 143, 258,
	101, 0, 125, 131, 0, 0, 0, 325, 276, 0,
	248, 222, 255, 223, 246, 273, 117, 244, 311, 282,
	261, 0, 333, 133, 291, 0, 151, 136, 0, 0,
	275, 314, 277, 308, 268, 300, 237, 290, 328, 259,
	296, 0, 0, 0, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 293, 322, 257, 295, 298, 221,
	292, 0, 225, 230, 338, 320, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 274, 278, 305, 266, 0,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 289,
	0, 0, 0, 232, 227, 272, 0, 0, 0, 236,
	0, 250, 306, 0, 0, 0, 315, 267, 161, 321,
	265, 264, 329, 302, 0, 312, 247, 256, 111, 254,
	149, 297, 159, 103, 318, 313, 287, 270, 271, 226,
	0, 304, 116, 124, 243, 294, 157, 158, 112, 162,
	231, 335, 104, 661, 334, 142, 662, 156, 319, 288,
	284, 228, 317, 286, 283, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 224, 0, 152, 326,
	340, 123, 118, 155, 115, 137, 108, 102, 234, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 316, 0, 0, 0,
	0, 0, 154, 233, 122, 240, 241, 238, 239, 280,
	281, 330, 331, 332, 307, 235, 0, 0, 310, 285,
	100, 105, 132, 337, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 253, 336, 303, 301, 323, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 324, 309, 269, 327, 245,
	260, 339, 262, 263, 299, 229, 279, 143, 258, 101,
	0, 125, 131, 0, 0, 0, 325, 276, 0, 248,
	222, 255, 223, 246, 273, 117, 244, 311, 282, 261,
	0, 333, 133, 291, 0, 151, 136, 0, 0, 275,
	314, 277, 308, 268, 300, 237, 290, 328, 259, 296,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 293, 322, 257, 295, 298, 221, 292,
	0, 225, 230, 338, 320, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 274, 278, 305, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 289, 0,
	0, 0, 232, 227, 272, 0, 0, 0, 236, 0,
	250, 306, 0, 0, 0, 315, 267, 161, 321, 265,
	264, 329, 302, 0, 312, 247, 256, 111, 254, 149,
	297, 159, 103, 318, 313, 287, 270, 271, 226, 0,
	304, 116, 124, 243, 294, 157, 158, 112, 162, 231,
	335, 104, 661, 334, 142, 662, 156, 319, 288, 284,
	228, 317, 286, 283, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 224, 0, 152, 326, 340,
	123, 118, 155, 115, 137, 108, 102, 234, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 242, 316, 0, 0, 0, 0,
	0, 154, 233, 122, 240, 241, 238, 239, 280, 281,
	330, 331, 332, 307, 235, 0, 0, 310, 285, 100,
	105, 132, 337, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 253, 336, 303, 301, 323, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 143, 0, 101, 0, 125, 131, 163, 164,
	166, 165, 167, 106, 875, 0, 399, 0, 0, 0,
	117, 398, 0, 0, 0, 0, 435, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 428, 429, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 448, 416,
	415, 417, 418, 419, 420, 0, 0, 107, 421, 422,
	423, 0, 0, 0, 396, 409, 0, 434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 407, 878,
	0, 0, 0, 446, 0, 408, 0, 0, 405, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 444, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 122, 436,
	445, 442, 443, 440, 441, 439, 438, 437, 447, 430,
	431, 433, 0, 432, 100, 105, 132, 0, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 143, 0, 101, 0, 125,
	131, 0, 0, 163, 164, 166, 165, 167, 106, 399,
	0, 0, 0, 117, 398, 0, 0, 0, 0, 435,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 428,
	429, 0, 0, 0, 0, 0, 0, 675, 53, 0,
	0, 448, 416, 415, 417, 418, 419, 420, 0, 0,
	107, 421, 422, 423, 676, 0, 0, 396, 409, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 407, 0, 0, 0, 0, 446, 0, 408, 0,
	0, 405, 410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 444, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 122, 436, 445, 442, 443, 440, 441, 439, 438,
	437, 447, 430, 431, 433, 0, 432, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 143, 0,
	101, 0, 125, 131, 0, 0, 163, 164, 166, 165,
	167, 106, 399, 0, 0, 0, 117, 398, 0, 0,
	0, 0, 435, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 448, 416, 415, 417, 418, 419,
	420, 0, 0, 107, 421, 422, 423, 0, 0, 0,
	396, 409, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 406, 407, 878, 0, 0, 0, 446,
	0, 408, 0, 0, 405, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 444, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 122, 436, 445, 442, 443, 440,
	441, 439, 438, 437, 447, 430, 431, 433, 0, 432,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 143, 0, 101, 0, 125, 131, 0, 0, 163,
	164, 166, 165, 167, 106, 399, 0, 0, 0, 117,
	398, 0, 0, 0, 0, 435, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 428, 429, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 390, 448, 416, 415,
	417, 418, 419, 420, 0, 0, 107, 421, 422, 423,
	0, 0, 0, 396, 409, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 407, 0, 0,
	0, 0, 446, 0, 408, 0, 0, 405, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 444, 0, 0, 0, 0, 0,
	0, 111, 0, 149, 0, 159, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 157,
	158, 112, 162, 0, 0, 104, 0, 0, 142, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 0, 0,
	0, 152, 0, 0, 123, 118, 155, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 0, 129, 135, 138,
	144, 145, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 122, 436, 445,
	442, 443, 440, 441, 439, 438, 437, 447, 430, 431,
	433, 0, 432, 100, 105, 132, 0, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 24, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 143, 0, 101, 0, 125,
	131, 0, 163, 164, 166, 165, 167, 106, 0, 399,
	0, 0, 0, 117, 398, 0, 0, 0, 0, 435,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 428,
	429, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 448, 416, 415, 417, 418, 419, 420, 0, 0,
	107, 421, 422, 423, 0, 0, 0, 396, 409, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 407, 0, 0, 0, 0, 446, 0, 408, 0,
	0, 405, 410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 444, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 122, 436, 445, 442, 443, 440, 441, 439, 438,
	437, 447, 430, 431, 433, 0, 432, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 143, 0,
	101, 0, 125, 131, 0, 0, 163, 164, 166, 165,
	167, 106, 399, 0, 0, 0, 117, 398, 0, 0,
	0, 0, 435, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 448, 416, 415, 417, 418, 419,
	420, 0, 0, 107, 421, 422, 423, 0, 0, 0,
	396, 409, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 406, 407, 0, 0, 0, 0, 446,
	0, 408, 0, 0, 405, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 444, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 122, 436, 445, 442, 443, 440,
	441, 439, 438, 437, 447, 430, 431, 433, 0, 432,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 143, 0, 101,
	0, 125, 131, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 117, 0, 0, 0, 0,
	0, 435, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 428, 429, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 448, 416, 415, 417, 418, 419, 420,
	0, 0, 107, 421, 422, 423, 0, 0, 0, 0,
	409, 0, 434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 406, 407, 0, 0, 0, 0, 446, 0,
	408, 0, 0, 405, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	444, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 122, 436, 445, 442, 443, 440, 441,
	439, 438, 437, 447, 430, 431, 433, 0, 432, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 143, 0,
	101, 0, 125, 131, 0, 0, 0, 0, 120, 153,
	0, 1040, 0, 0, 0, 128, 117, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 151, 136, 163, 164,
	166, 165, 167, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 1042, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 565, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 0, 0, 0, 152, 0,
	0, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 0, 129, 135, 138, 144, 145, 150,
	0, 143, 0, 101, 0, 742, 131, 0, 0, 743,
	740, 745, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 154, 0, 122, 0, 133, 0, 0, 151,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 161, 0, 0, 0, 0, 739, 0, 0, 0,
	0, 111, 0, 149, 0, 159, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 124, 0, 0, 157,
	158, 112, 162, 0, 0, 104, 0, 0, 142, 0,
	156, 0, 0, 0, 0, 0, 0, 24, 130, 119,
	126, 146, 134, 147, 127, 140, 139, 141, 143, 0,
	101, 152, 125, 131, 123, 118, 155, 115, 137, 108,
	102, 0, 109, 110, 114, 113, 117, 129, 135, 138,
	144, 145, 150, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 98, 154, 0, 122, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 105, 132, 0, 148, 121, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 153, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 164, 166, 165, 167, 106, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 143, 0, 101, 152, 125,
	131, 123, 118, 155, 115, 137, 108, 102, 1274, 109,
	110, 114, 113, 117, 129, 135, 138, 144, 145, 150,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 154, 1276, 122, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 24, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 143, 0, 101, 152, 125, 131, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	117, 129, 135, 138, 144, 145, 150, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 219, 154,
	0, 122, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 0,
	0, 0, 152, 0, 0, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 0, 129, 135,
	138, 144, 145, 150, 0, 143, 0, 101, 0, 125,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 154, 0, 122, 0,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 219, 0, 0, 643, 0, 0, 644, 0, 0,
	107, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 0, 0, 0, 152, 0, 0, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	0, 129, 135, 138, 144, 145, 150, 0, 143, 0,
	101, 0, 125, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 478, 0, 154,
	0, 122, 0, 133, 0, 0, 151, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 219, 0, 477, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	149, 0, 159, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 124, 0, 0, 157, 158, 112, 162,
	0, 0, 104, 0, 0, 142, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 130, 119, 126, 146, 134,
	147, 127, 140, 139, 141, 143, 0, 101, 152, 125,
	131, 123, 118, 155, 115, 137, 108, 102, 0, 109,
	110, 114, 113, 117, 129, 135, 138, 144, 145, 150,
	133, 0, 0, 151, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 154, 1276, 122, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 105, 132, 0, 148, 121, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	153, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 166, 165, 167, 106, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 149, 0, 159,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	124, 0, 0, 157, 158, 112, 162, 0, 0, 104,
	0, 0, 142, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 130, 119, 126, 146, 134, 147, 127, 140,
	139, 141, 143, 0, 101, 152, 125, 131, 123, 118,
	155, 115, 137, 108, 102, 0, 109, 110, 114, 113,
	117, 129, 135, 138, 144, 145, 150, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 98, 154,
	0, 122, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 105, 132,
	0, 148, 121, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 153, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 163, 164, 166, 165,
	167, 106, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 143,
	0, 101, 152, 125, 131, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 117, 129, 135,
	138, 144, 145, 150, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 154, 1042, 122, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 0, 0, 0, 152,
	0, 0, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 0, 129, 135, 138, 144, 145,
	150, 0, 143, 0, 101, 0, 125, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 461,
	117, 0, 0, 154, 0, 122, 0, 133, 0, 0,
	151, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 160, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 149, 0, 159, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 124, 0, 0,
	157, 158, 112, 162, 0, 0, 104, 0, 0, 142,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 130,
	119, 126, 146, 134, 147, 127, 140, 139, 141, 143,
	0, 101, 152, 125, 131, 123, 118, 155, 115, 137,
	108, 102, 0, 109, 110, 114, 113, 117, 129, 135,
	138, 144, 145, 150, 133, 0, 0, 151, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 154, 0, 122, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 105, 132, 0, 148, 121,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 153, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 164, 166, 165, 167, 106, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 149, 0, 159, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 124, 0, 0, 157, 158, 112,
	162, 0, 0, 104, 0, 0, 142, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 130, 119, 126, 146,
	134, 147, 127, 140, 139, 141, 143, 0, 101, 152,
	125, 131, 123, 118, 155, 115, 137, 108, 102, 0,
	109, 110, 114, 113, 117, 129, 135, 138, 144, 145,
	150, 133, 0, 0, 151, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 154, 0, 122, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 105, 132, 0, 148, 121, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 153, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 166, 165, 167, 106, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 149, 0,
	159, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 124, 0, 0, 157, 158, 112, 162, 0, 0,
	104, 0, 0, 142, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 130, 119, 126, 146, 134, 147, 127,
	140, 139, 141, 143, 0, 101, 152, 125, 131, 123,
	118, 155, 115, 137, 108, 102, 0, 109, 110, 114,
	113, 117, 129, 135, 138, 144, 145, 150, 133, 0,
	0, 151, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	154, 0, 122, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 105,
	132, 0, 148, 121, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 153, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 164, 166,
	165, 167, 106, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 149, 0, 159, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 124, 0,
	0, 157, 158, 112, 162, 0, 0, 104, 0, 0,
	142, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	130, 119, 126, 146, 134, 147, 127, 140, 139, 141,
	143, 0, 101, 152, 125, 131, 123, 118, 155, 115,
	137, 108, 102, 0, 109, 110, 114, 113, 117, 129,
	135, 138, 144, 145, 150, 133, 0, 0, 151, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 154, 0, 122,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 105, 132, 0, 148,
	121, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 153, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 164, 166, 165, 167, 106,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 149, 0, 159, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 124, 0, 0, 157, 158,
	112, 162, 0, 0, 104, 0, 0, 142, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 130, 119, 126,
	146, 134, 147, 127, 140, 139, 141, 143, 0, 101,
	152, 125, 131, 123, 118, 155, 115, 137, 108, 102,
	0, 109, 110, 114, 113, 117, 129, 135, 138, 144,
	145, 150, 133, 0, 0, 151, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1126, 154, 0, 122, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 105, 132, 0, 148, 121, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 153, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 164, 166, 165, 167, 106, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 149,
	0, 159, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 124, 0, 0, 157, 158, 112, 162, 0,
	0, 104, 0, 0, 142, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 130, 119, 126, 146, 134, 147,
	127, 140, 139, 141, 0, 0, 0, 152, 0, 0,
	123, 118, 155, 115, 137, 108, 102, 0, 109, 110,
	114, 113, 0, 129, 135, 138, 144, 145, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	105, 132, 0, 148, 121, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 153,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 164,
	166, 165, 167, 106,
}
var yyPact = [...]int{

	114, -1000, -219, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 927, 956, -1000, -1000, -1000, -1000, -1000, 757,
	134, 78, 36, 126, 116, 68, 105, 9296, -1000, -1000,
	58, -1000, -172, -1000, -1000, -204, -1000, -1000, -1000, -1000,
	760, -1000, -1000, -1000, -1000, -1000, 912, 924, 778, 890,
	814, -1000, 78, 9296, 942, 2339, -153, 9463, 71, 100,
	99, 98, 71, -1000, 104, -1000, 69, 640, 69, 9296,
	9296, -65, 25, -1000, -1000, -67, -1000, -1000, -1000, -78,
	-1000, -1000, -1000, -1000, -1000, -1000, 9296, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 444, -1000, -1000, -1000, -1000, 728, 728, -1000, 9296,
	-1000, -1000, -1000, -1000, -1000, 513, 877, 6521, 6521, 927,
	-1000, 760, -1000, -1000, -1000, 859, -1000, -1000, 282, 8795,
	868, 186, 9296, 732, -1000, -1000, -175, 2917, -1000, -1000,
	-1000, -1000, 253, 8101, 8101, -1000, -1000, -1000, 863, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 921, 915, 666, -1000, 1507, -1000, -1000, 9296, 268,
	636, 633, 628, 9296, 9296, 9296, 881, 783, 9296, -1000,
	-1000, 941, 9296, 9296, -1000, -1000, 939, 940, -1000, -1000,
	-1000, -1000, -1000, 939, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6521, -1000, -1000, 168, -1000, -1000,
	-1000, -1000, 950, 207, 383, -1000, 6521, 1506, 728, 728,
	-1000, -1000, 141, -1000, -1000, 6780, 6780, 6780, 6780, 6780,
	6780, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 728, 185, -1000, 6258, 728, 728,
	728, 728, 728, 728, 6521, 728, 728, 728, 728, 728,
	728, 728, 728, 728, 728, 728, 728, 728, -1000, -1000,
	731, -1000, 375, 912, 513, 814, 7908, 787, -1000, -1000,
	727, 9296, -1000, 9129, 4940, 933, 2628, -1000, 725, 724,
	-186, -190, -1000, -175, 5468, -1000, -1000, -1000, -1000, 190,
	-1000, -148, 728, 76, 7214, 813, -6, -1000, -1000, -1000,
	734, -1000, 734, 734, 734, 734, 27, 27, 27, 27,
	-1000, -1000, -1000, -1000, -1000, 765, -1000, 734, 734, 734,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 764, 764,
	764, 735, 735, 870, 880, 776, 774, 772, -1000, 755,
	722, -1000, -1000, 9296, -1000, 912, -66, -1000, -1000, 306,
	9296, 9296, -1000, -1000, -1000, -1000, 663, 231, -1000, 9296,
	-1000, -1000, -1000, 815, 6521, 6521, 474, 6521, 6521, 220,
	6780, 386, 265, 6780, 6780, 6780, 6780, 6780, 6780, 6780,
	6780, 6780, 6780, 6780, 6780, 6780, 6780, 6780, 408, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 624, -1000, 760,
	498, 498, 108, 108, 108, 108, 108, 1973, 5205, 4651,
	513, 6258, 5731, 5731, 6521, 6521, 5731, 885, 260, 231,
	8962, -1000, 513, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5731, 5731, 5731, 5731, 6521, -1000, -1000, -1000, 877, -1000,
	885, 917, -1000, 850, 849, 5731, -1000, 769, 9129, 728,
	-1000, 7715, -1000, 750, -1000, 248, -1000, 183, -1000, -1000,
	-1000, -1000, -1000, 927, 6521, -1000, 4073, -1000, -198, -1000,
	-184, -182, -1000, -1000, -1000, -1000, -1000, 231, -1000, 622,
	728, 728, 9463, -1000, 76, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 235, 235, 101, -1000, -1000, 235, 235, 235, 235,
	235, -27, -28, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, -1000, -1000, -1000, 895,
	189, 619, 184, 184, -1000, -1000, -1000, 813, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	275, 103, -1000, 894, -1000, 893, 507, 949, 401, 151,
	145, -12, -1000, -1000, 443, 27, 27, -1000, -1000, -1000,
	862, -1000, -1000, -1000, 504, -1000, -1000, -1000, -1000, 442,
	-1000, -1000, -1000, 441, -1000, -1000, 870, -1000, 73, -1000,
	9296, 9296, 9296, -1000, 179, 236, 82, 63, 62, 61,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9296, -1000,
	-1000, 496, -1000, -1000, -1000, 494, 6521, -1000, 306, -1000,
	6521, -1000, -1000, 831, 220, 292, -1000, -1000, 331, -1000,
	-1000, 231, 231, 531, -1000, -1000, -1000, -1000, 386, 6780,
	6780, 6780, 1462, 531, 1636, 330, 610, 108, 271, 271,
	204, 204, 204, 204, 204, 309, 309, -1000, -1000, -1000,
	513, -1000, -1000, -1000, 513, 5731, 721, -1000, -1000, 7021,
	154, 728, 153, -1000, -1000, 513, 609, 609, 162, 425,
	609, 5731, 288, -1000, 6521, 513, -1000, 609, 513, 609,
	609, -1000, -1000, 9296, -1000, -1000, -1000, -1000, 737, -1000,
	872, 679, 702, -1000, -1000, 5994, 513, 632, 152, 927,
	9129, 6521, 4651, 912, 231, -1000, -1000, -1000, -203, -195,
	-1000, -1000, 9463, 9463, 513, -1000, 493, -1000, 401, 235,
	235, -1000, 861, 406, 402, 397, 492, 490, 235, 235,
	393, 485, 618, 392, 388, 382, 510, 471, 176, 488,
	469, 434, 9630, 763, 598, 762, 761, 595, 588, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -82,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 603, -1000, -1000, 199, 617, -1000, 720, 615, -1000,
	235, 235, 728, 728, 728, -1000, 9296, -1000, -1000, -1000,
	579, 26, 757, 548, 9463, -1000, -1000, -1000, -1000, 231,
	-1000, 231, -1000, -1000, -1000, -1000, -1000, -1000, 1462, 531,
	1594, -1000, 6780, 6780, -1000, -1000, 609, 5731, -1000, -1000,
	8602, -1000, -1000, 3784, 5731, 4362, -1000, -1000, -1000, 677,
	408, 677, -117, 706, 243, -1000, 6521, 242, -1000, -1000,
	-1000, -1000, -1000, -1000, 933, 8435, 889, -1000, 728, -1000,
	-1000, 729, 8962, 8962, 912, -1000, 231, -1000, -1000, -1000,
	-1000, -1000, 513, 513, 3206, -1000, -1000, 401, 401, -1000,
	-1000, -1000, -1000, -1000, -1000, 467, 458, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8962, 756,
	8962, 8962, 749, 745, -1000, 744, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 457, 379, -1000, 343, 550, 255, 8962,
	8962, 8962, -1000, -1000, -1000, 860, -1000, -1000, -1000, -1000,
	6780, 531, 531, -1000, -1000, -1000, -1000, 150, 513, -1000,
	513, 734, 734, -1000, 734, 735, -1000, 734, 45, 734,
	43, 513, 513, 728, -114, -1000, 231, 6521, 931, 716,
	723, -1000, -1000, -1000, 878, 7381, 7548, 945, -1000, 728,
	-1000, 760, 149, -1000, -1000, -142, 728, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 602, -1000, 734, 8962, 592, 585,
	8962, 8962, 381, -1000, 593, 586, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 583, 583, 583, 544, 531, 3495, -1000,
	-1000, -1000, 128, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6780, 513, 456, 231, 929, 914, 8435, 8435, 8435,
	8435, -1000, 805, 803, -1000, 809, 796, 832, 9296, -1000,
	565, 7381, 147, -1000, 8268, -1000, -1000, 9129, 702, 513,
	8962, 3206, 337, -139, -1000, 8962, -1000, 561, -1000, -1000,
	558, 556, -1000, 562, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 37, -1000, -1000, -1000, 6521, 6521, 723,
	767, 532, -1000, -1000, -1000, -1000, 799, -1000, 766, -1000,
	-1000, -1000, -1000, -1000, 96, 95, 93, -1000, 678, -1000,
	-1000, -1000, -1000, 553, -1000, 516, -1000, -1000, 175, 175,
	-1000, -1000, -1000, 175, 106, 350, 513, 74, -127, 231,
	644, 6521, 6521, -1000, -1000, 728, 728, 728, -139, 3206,
	846, 175, -1000, -1000, -1000, 235, 409, 94, 106, 350,
	875, 875, -1000, -1000, 899, 875, -1000, -1000, 827, -122,
	-135, 231, 231, 8962, 8962, 8962, -1000, -1000, 206, 299,
	-1000, -1000, -1000, -1000, -1000, 235, 235, 901, -1000, 825,
	-1000, 512, -1000, 512, 512, 728, -1000, 550, 550, -1000,
	-125, -1000, 8962, -1000, -1000, -1000, -1000, -1000, -128, -1000,
	-136, -1000,
}
var yyPgo = [...]int{

	0, 1213, 1211, 1209, 1208, 1203, 1202, 1201, 45, 844,
	1200, 1195, 1194, 1191, 1190, 1189, 1182, 1181, 1180, 1177,
	1176, 1175, 1174, 1173, 1172, 217, 1171, 1170, 1169, 1166,
	1165, 72, 1164, 82, 1163, 1162, 1161, 47, 55, 41,
	34, 231, 1160, 27, 13, 19, 1158, 1156, 16, 1155,
	1436, 1149, 77, 1148, 1146, 53, 1145, 1144, 1143, 2,
	26, 1142, 1141, 1140, 1139, 73, 18, 1138, 1137, 1136,
	1134, 1133, 1130, 52, 14, 20, 6, 25, 1128, 40,
	35, 1127, 44, 1125, 1124, 1123, 1120, 28, 1118, 63,
	1115, 22, 65, 1114, 42, 11, 48, 1113, 1112, 62,
	76, 71, 67, 1111, 59, 1108, 1107, 167, 1105, 1104,
	1103, 708, 1102, 441, 350, 1101, 54, 1099, 39, 0,
	113, 15, 30, 1098, 43, 829, 36, 17, 1096, 1095,
	1464, 3, 33, 70, 29, 1092, 1090, 1089, 1088, 1087,
	1079, 1078, 32, 1077, 1070, 1069, 1068, 1067, 1065, 1063,
	1060, 1057, 1056, 1049, 1048, 1047, 1045, 1044, 1043, 1042,
	1040, 1039, 1038, 1037, 1035, 1033, 1031, 1030, 1028, 1027,
	1024, 1022, 31, 1021, 1020, 1018, 21, 57, 24, 56,
	1017, 1016, 1014, 79, 23, 1013, 1012, 1011, 1006, 1004,
	49, 1003, 69, 37, 997, 996, 995, 61, 10, 175,
	12, 4, 5, 9, 1, 994, 992, 991, 990, 989,
	988, 7, 987, 986, 58, 981, 979, 60, 8, 978,
	968, 967, 50, 84, 966, 74,
}
var yyR1 = [...]int{

	0, 220, 221, 221, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 219,
	219, 218, 147, 147, 16, 16, 16, 16, 16, 16,
	16, 16, 210, 210, 211, 211, 206, 204, 204, 202,
	202, 208, 208, 200, 200, 205, 205, 203, 203, 201,
	201, 207, 207, 215, 215, 216, 216, 217, 217, 179,
	179, 178, 178, 177, 177, 180, 180, 180, 19, 193,
	195, 195, 196, 196, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 150,
	152, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 165, 166, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 168,
	168, 169, 169, 170, 170, 171, 171, 153, 176, 176,
	151, 146, 148, 149, 149, 194, 194, 194, 190, 124,
	124, 135, 135, 135, 135, 212, 212, 213, 213, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 138,
	138, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 139, 139, 139, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 141,
	141, 141, 189, 189, 142, 142, 183, 183, 184, 184,
	184, 181, 181, 182, 182, 185, 185, 143, 143, 143,
	143, 143, 30, 29, 29, 29, 109, 109, 109, 186,
	172, 172, 172, 145, 173, 173, 174, 174, 174, 175,
	175, 175, 187, 187, 188, 188, 144, 191, 191, 191,
	191, 191, 191, 192, 192, 199, 199, 198, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 18, 56,
	56, 1, 20, 2, 3, 4, 4, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 36, 36, 52, 52, 53, 53, 54, 54,
	55, 55, 55, 24, 22, 23, 23, 23, 23, 224,
	25, 26, 26, 27, 27, 27, 33, 33, 33, 31,
	31, 32, 32, 39, 39, 38, 38, 40, 40, 40,
	40, 123, 123, 123, 122, 122, 42, 42, 43, 43,
	44, 44, 45, 45, 45, 57, 46, 46, 46, 46,
	129, 129, 128, 128, 128, 127, 127, 47, 47, 47,
	47, 48, 48, 48, 48, 49, 49, 51, 51, 50,
	50, 58, 58, 58, 58, 59, 59, 60, 60, 41,
	41, 41, 41, 41, 41, 41, 112, 112, 62, 62,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	72, 72, 72, 72, 72, 72, 63, 63, 63, 63,
	63, 63, 63, 37, 37, 73, 73, 73, 79, 74,
	74, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 70, 70, 70, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 225, 225, 71, 71, 71, 71, 34, 34, 34,
	34, 34, 132, 132, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 83, 83, 35,
	35, 81, 81, 82, 84, 84, 80, 80, 80, 65,
	65, 65, 65, 65, 65, 65, 67, 67, 67, 85,
	85, 86, 86, 87, 87, 88, 88, 89, 90, 90,
	90, 91, 91, 91, 91, 92, 92, 92, 64, 64,
	64, 64, 64, 64, 93, 93, 93, 93, 94, 94,
	75, 75, 77, 77, 76, 78, 95, 95, 96, 97,
	97, 100, 100, 99, 99, 99, 99, 99, 108, 108,
	107, 107, 107, 98, 98, 101, 101, 105, 105, 104,
	106, 106, 106, 106, 103, 103, 102, 102, 133, 133,
	133, 110, 110, 113, 113, 114, 114, 111, 111, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 116,
	116, 116, 117, 117, 209, 209, 120, 120, 121, 121,
	125, 125, 126, 126, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 222, 223, 130, 131, 131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 2, 10, 12, 8, 5, 11,
	11, 11, 1, 1, 1, 1, 2, 3, 2, 0,
	2, 1, 1, 0, 2, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 1, 2, 4, 4, 0,
	1, 0, 1, 1, 2, 1, 1, 1, 4, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 1, 1, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	3, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 2, 2,
	2, 2, 3, 1, 3, 4, 1, 1, 1, 1,
	0, 3, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 5, 7, 6,
	6, 7, 7, 1, 1, 1, 3, 2, 6, 7,
	7, 7, 9, 7, 7, 7, 4, 5, 4, 1,
	3, 3, 3, 2, 2, 3, 4, 2, 3, 2,
	2, 4, 4, 3, 6, 3, 6, 5, 5, 3,
	3, 5, 6, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 0, 3, 0, 2, 0, 1, 1, 1,
	0, 2, 2, 4, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 3,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 1, 3, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 1, 2, 3, 3, 3, 2, 3, 1, 2,
	1, 1, 1, 2, 3, 2, 2, 0, 2, 3,
	2, 2, 2, 1, 0, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -220, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 37, -19,
	118, 119, 120, 141, 122, 134, 40, 57, 260, 136,
	267, 270, 271, 274, 273, 288, 33, 135, 139, 140,
	-222, 7, 243, 60, -221, 294, -87, 14, -27, 5,
	-25, -224, -25, -25, -25, -25, -193, 60, 235, -209,
	21, 25, 125, 26, -111, 129, 125, 126, 235, 125,
	125, 229, 118, 224, 262, -53, 264, 265, 231, 125,
	266, 227, 263, 226, 63, 39, 125, -125, 63, -119,
	249, 19, 196, 142, 161, 250, 293, 72, 195, 198,
	199, 137, 157, 201, 200, 193, 151, 35, 191, 175,
	268, 254, 233, 190, 152, 21, 176, 180, 275, 203,
	174, 22, 251, 42, 178, 204, 46, 194, 205, 182,
	181, 183, 164, 17, 206, 207, 177, 179, 253, 139,
	208, 45, 187, 269, 231, 192, 166, 155, 156, 141,
	255, 127, 158, 288, 289, 291, 290, 292, -130, -130,
	66, 253, -130, 272, -130, -130, 289, 291, 290, 292,
	293, -130, -130, -130, -130, -8, -91, 16, 15, -11,
	-9, -222, 6, 28, 29, -33, 47, 48, -26, -111,
	-50, -125, 10, -97, -98, -100, 272, -133, -99, 276,
	277, 275, -121, -108, 278, -120, -118, 165, 162, 63,
	-119, 78, 30, 32, 185, 81, 148, 113, 170, 15,
	82, 159, 112, 232, 197, 244, 118, 55, 236, 237,
	234, 235, 224, 153, 36, 9, 33, 135, 29, 106,
	120, 85, 86, 262, 138, 31, 136, 75, 18, 58,
	10, 39, 12, 13, 130, 129, 97, 126, 53, 7,
	146, 147, 114, 34, 94, 49, 27, 51, 95, 16,
	238, 239, 38, 173, 169, 248, 172, 145, 168, 108,
	56, 43, 79, 73, 154, 76, 59, 140, 77, 14,
	54, 265, 132, 264, 150, 96, 121, 243, 52, 6,
	247, 37, 134, 144, 50, 125, 225, 171, 143, 167,
	84, 128, 74, 266, 5, 26, 188, 8, 57, 131,
	240, 241, 242, 41, 163, 160, 263, 252, 83, 11,
	189, 256, 261, -194, -190, -124, 63, -119, -114, 130,
	126, 126, 126, -114, 125, -113, 130, 63, -113, -50,
	-50, 228, 125, 235, -130, -130, 225, -54, 232, 233,
	-130, -130, -130, 231, -130, -130, -130, -130, -130, -50,
	-130, 66, -130, -76, -222, -76, -130, -50, -130, -223,
	62, -92, 18, 38, -41, -61, 79, -66, 36, 31,
	-65, -62, -80, -78, -79, 113, 102, 103, 110, 80,
	114, -70, -68, -69, -71, 65, 64, 66, 67, 68,
	69, 73, 74, 75, -120, -125, -76, -222, 51, 52,
	244, 245, 248, 246, 82, 41, 234, 242, 241, 240,
	238, 239, 236, 237, 130, 235, 108, 243, 63, -119,
	-88, -89, -41, -87, -8, -25, 43, -31, 29, 71,
	-51, 34, -50, 37, 115, -50, 61, -101, -104, -102,
	279, 281, -99, 272, 87, -107, -120, 65, 36, -107,
	37, 15, 15, 62, 61, -135, -138, -140, -139, -141,
	-136, -137, 159, 160, 113, 163, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 137, 155, 156, 157,
	158, 176, 177, 178, 179, 180, 181, 182, 183, 142,
	161, 250, 143, 144, 145, 146, 147, 148, 150, 151,
	152, 153, 154, -125, 79, 63, 63, 63, -50, -50,
	-56, -50, 31, 59, -125, -36, 10, -50, -50, -52,
	10, 10, -52, -130, -130, -130, -74, -41, -130, -116,
	128, 30, 8, 97, 78, 77, 94, 61, 17, -41,
	-63, 97, 79, 95, 96, 81, 99, 98, 109, 102,
	103, 104, 105, 106, 107, 108, 100, 101, 112, 87,
	88, 89, 90, 91, 92, 93, -112, -222, -79, -222,
	116, 117, -66, -66, -66, -66, -66, -66, -222, 115,
	-8, -222, -222, -222, -222, -222, -222, -222, -83, -41,
	-222, -225, -222, -225, -225, -225, -225, -225, -225, -225,
	-222, -222, -222, -222, 61, -90, 32, 33, -91, -223,
	-33, -67, -120, 66, 69, -32, 50, -64, 37, 41,
	-8, -222, -50, -95, -96, -80, -120, -125, -126, -125,
	-118, 162, 165, -60, 11, -100, -133, -103, 61, -105,
	61, 280, 282, 283, -101, 59, 76, -41, -173, 112,
	258, 259, -222, -195, -196, -197, -151, -146, -148, -149,
	-150, -152, -153, -154, -155, -156, -157, -158, -159, -160,
	-161, -162, -163, -164, -165, -166, -167, -168, -169, -170,
	-171, 72, 268, -179, 275, 269, 185, 196, 40, 197,
	198, 199, 126, 201, 202, 203, 22, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 36, -190, -191, 132,
	26, -192, 21, 25, 126, 27, -212, -213, -214, -185,
	-143, -186, -187, -188, -144, -30, -145, -174, -175, 73,
	79, 36, 185, 132, 27, 26, 72, 59, 112, 195,
	192, -181, 188, -142, 60, -142, -142, -142, -142, -172,
	162, -172, -172, -172, 60, -142, -142, -142, -183, 60,
	-183, -183, -184, 60, -184, -215, -216, -217, -179, 31,
	59, 59, 59, -115, 121, 268, 244, 123, 120, 124,
	119, 185, 162, 72, 36, 14, 255, 63, 61, -50,
	-91, 230, -130, -130, -55, 95, 11, -50, -50, -130,
	61, -223, -50, 45, -41, -41, -72, 73, 79, 74,
	75, -41, -41, -66, -73, -76, -79, 70, 97, 95,
	96, 81, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -132, 63, 65,
	63, -65, -65, -120, -39, 29, -38, -40, 104, -41,
	-125, -121, -126, -118, -223, -8, -38, -38, -41, -41,
	-38, -31, -81, -82, 83, -120, -223, -38, -39, -38,
	-38, -89, -92, -110, 18, 10, 41, 41, -38, -94,
	59, -95, -75, -77, -76, -222, -8, -93, -120, -60,
	61, 87, 115, -87, -41, -102, -104, -106, 284, 281,
	287, 63, -222, -222, -124, -197, -178, 87, -178, 112,
	-177, 165, 162, -178, -178, -178, -178, -178, 200, 200,
	-178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
	-178, -178, -178, 27, -192, 63, 63, -192, -192, -214,
	73, 65, 66, 67, 73, 234, 27, 27, 65, 8,
	-176, 63, 65, 190, 191, 36, 36, 193, 194, -182,
	189, 66, -172, -172, 37, -189, 65, 66, 66, -217,
	112, -177, -50, -50, -50, -130, -116, -117, 126, 27,
	87, 128, 133, 133, 133, -50, -130, 65, 65, -41,
	-55, -41, -130, 46, 73, 74, 75, -73, -66, -66,
	-66, -37, 138, 78, -223, -223, -38, 61, -123, -122,
	30, -120, 65, 115, -222, 115, -223, -223, -223, 61,
	131, 30, -223, -38, -84, -82, 85, -41, -223, -223,
	-223, -223, -223, -50, -42, 10, 35, -94, 61, -223,
	-223, -223, 61, 115, -87, -96, -41, -121, -91, 281,
	285, 286, -124, -124, -223, 65, -176, -178, -178, 37,
	66, 66, 66, 65, 65, -178, -178, 66, 65, 63,
	66, 66, 66, 66, 36, 65, 36, 191, 190, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	66, 36, 66, 36, 66, 36, 63, -119, 60, 63,
	60, 60, 63, 63, -29, -109, 234, 238, 239, 62,
	63, 113, 62, 61, 61, 62, 61, -178, -178, -222,
	-222, -222, -50, -130, 63, 162, -193, 63, -190, -37,
	78, -66, -66, -223, -40, -122, 104, -126, -39, -121,
	-134, 113, 159, 137, 157, 153, 174, 164, 187, 155,
	188, -132, -134, 249, -87, 86, -41, 84, -60, -43,
	-44, -45, -46, -57, -79, -222, -50, 27, -77, 41,
	-8, -222, -120, -120, -91, -223, -223, -131, -222, -121,
	-176, -176, 65, 65, -199, -198, -120, 60, -199, -199,
	60, 60, 60, 65, 66, 66, -211, 63, 36, -180,
	63, 113, 36, -199, -199, -199, 37, -66, 115, -223,
	-223, -142, -142, -142, -184, -142, 147, -142, 147, -223,
	-223, -222, -35, 247, -41, -85, 12, 61, -47, -48,
	-49, 49, 53, 55, 50, 51, 52, 56, -129, 30,
	-43, -222, -128, -127, 30, -125, 65, 8, -75, -8,
	115, -147, 257, -222, 62, 61, -142, -199, 62, 62,
	-199, -199, 62, 66, 62, 62, -223, -223, -223, 63,
	104, -172, 63, -66, -223, 65, -86, 13, 15, -44,
	-45, -44, -45, 49, 49, 49, 54, 49, 54, 49,
	-48, -125, -223, -58, 57, 129, 58, -127, -95, -223,
	-120, -131, 66, -219, -218, 256, -198, 62, -202, -202,
	62, 62, 62, -202, -200, -203, -34, 97, 252, -41,
	-74, 59, 59, 49, 49, 126, 126, 126, 61, -223,
	63, -202, -208, -204, -206, 22, 72, 131, -200, -203,
	-201, -201, -205, -204, 252, -201, -204, -223, 250, 56,
	253, -41, -41, -222, -222, -222, -218, -131, 41, -178,
	65, -210, 258, 20, -207, 38, 19, 24, 46, 251,
	254, -59, -120, -59, -59, 97, 66, -178, -178, 23,
	46, -223, 61, -223, -223, -76, -211, -211, 252, -120,
	253, 254,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 563, 0, 349, 349, 349, 349, 349, 0,
	654, 637, 0, 0, 0, 336, 0, 0, 856, 856,
	0, 856, 0, 856, 856, 0, 856, 856, 856, 856,
	0, 33, 34, 854, 1, 3, 571, 0, 0, 353,
	356, 351, 637, 0, 0, 0, 44, 0, 635, 0,
	0, 0, 635, 655, 0, 638, 633, 0, 633, 0,
	0, 0, 0, 856, 856, 0, 856, 856, 856, 0,
	856, 856, 856, 856, 856, 337, 0, 344, 660, 661,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 303, 304,
	856, 0, 307, 856, 309, 310, 0, 0, 856, 0,
	856, 345, 346, 347, 348, 27, 575, 0, 0, 563,
	29, 0, 349, 354, 355, 359, 357, 358, 350, 0,
	0, 409, 0, 37, 38, 599, 0, 0, 601, 628,
	629, -2, 0, 0, 0, 658, 659, -2, 675, 656,
	657, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 0, 0, 0, 165, 0, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	302, 332, 0, 0, 319, 320, 334, 0, 338, 339,
	323, 324, 325, 334, 327, 328, 329, 330, 331, 856,
	305, 856, 308, 856, 0, 856, 313, 649, 315, 28,
	855, 23, 0, 0, 572, 419, 0, 424, 426, 0,
	461, 462, 463, 464, 465, 0, 0, 0, 0, 0,
	0, 487, 488, 489, 490, 549, 550, 551, 552, 553,
	554, 555, 428, 429, 546, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 537, 0, 511, 511, 511, 511,
	511, 511, 511, 511, 0, 0, 0, 0, -2, -2,
	564, 565, 568, 571, 27, 356, 0, 361, 360, 352,
	0, 0, 408, 0, 0, 417, 0, 613, 624, 617,
	0, 0, 602, 0, 0, 606, 610, 611, 612, 264,
	609, 0, 0, -2, 0, 175, 241, 172, 173, 174,
	234, 190, 234, 234, 234, 234, 260, 260, 260, 260,
	218, 219, 220, 221, 222, 0, 205, 234, 234, 234,
	209, 224, 225, 226, 227, 228, 229, 230, 231, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 236, 236,
	236, 238, 238, -2, 0, 0, 0, 0, 88, 0,
	296, 299, 634, 0, 298, 571, 0, 856, 856, 340,
	0, 0, 856, 343, 306, 311, 0, 459, 312, 0,
	650, 651, 576, 0, 0, 0, 0, 0, 0, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 446,
	447, 448, 449, 450, 451, 452, 425, 0, 439, 0,
	0, 0, 481, 482, 483, 484, 485, 0, 363, 0,
	27, 0, 0, 0, 0, 0, 0, 359, 0, 538,
	0, 503, 0, 504, 505, 506, 507, 508, 509, 510,
	0, 363, 0, 0, 0, 567, 569, 570, 575, 30,
	359, 0, 556, 0, 0, 0, 362, 588, 0, 0,
	-2, 0, 407, 417, 596, 0, 546, 0, 410, 662,
	663, 675, 676, 563, 0, 600, 0, 615, 0, 616,
	0, 0, 626, 627, 614, 603, 604, 605, 607, 0,
	0, 0, 0, 89, -2, 92, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 81, 81, 0, 163, 164, 81, 81, 81, 81,
	81, 0, 0, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 80, 166, 167, 0,
	0, 0, 811, 0, 283, 284, 168, 176, 177, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 245,
	0, 0, 259, 0, 273, 275, 0, 0, 0, 0,
	0, 243, 242, 189, 0, 260, 260, 212, 213, 214,
	0, 215, 216, 217, 0, 206, 207, 208, 200, 0,
	201, 202, 203, 0, 204, 48, -2, 75, 0, 636,
	0, 0, 0, 856, 649, 0, 646, 0, 644, 0,
	639, 640, 641, 642, 643, 645, 647, 648, 0, 297,
	856, 0, 317, 318, 321, 0, 0, 335, 340, 326,
	0, 594, 856, 0, 420, 421, 423, 440, 0, 442,
	444, 573, 574, 430, 431, 455, 456, 457, 0, 0,
	0, 0, 453, 435, 0, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 480, 522, 523,
	0, 478, 479, 486, 0, 0, 364, 365, 367, 371,
	0, 547, 0, -2, 458, 27, 0, 0, 0, 0,
	0, 0, 544, 541, 0, 0, 512, 0, 0, 0,
	0, 566, 24, 0, 631, 632, 557, 558, 376, 31,
	0, 588, 578, 590, 592, 0, 27, 0, 584, 563,
	0, 0, 0, 571, 418, 625, 618, 619, 0, 0,
	623, 265, 0, 0, 0, 93, 0, 82, 0, 81,
	81, 83, 0, 0, 0, 0, 0, 0, 81, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	246, 247, 248, 249, 250, 251, 272, 274, 276, 0,
	263, 158, 159, 266, 267, 268, 269, 270, 271, 171,
	244, 0, 210, 211, 0, 0, 232, 0, 0, 76,
	81, 81, 0, 0, 0, 288, 0, 856, 652, 653,
	0, 0, 0, 0, 0, 300, 316, 333, 341, 342,
	322, 460, 314, 577, 441, 443, 445, 432, 453, 436,
	0, 433, 0, 0, 427, 491, 0, 0, 368, 372,
	0, 374, 375, 0, 363, 0, -2, 494, 495, 0,
	0, 0, 0, 563, 0, 542, 0, 0, 502, 513,
	514, 515, 516, 25, 417, 0, 0, 32, 0, 593,
	-2, 0, 0, 0, 571, 597, 598, 547, 36, 620,
	621, 622, 0, 0, 857, 160, 161, 0, 0, 84,
	119, 120, 157, 122, 123, 0, 0, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 0, 0,
	0, 0, 0, 0, 252, 253, 256, 257, 258, 235,
	261, 262, 223, 0, 0, 239, 0, 0, 0, 0,
	0, 0, 289, 290, 291, 0, 293, 294, 295, 434,
	0, 454, 437, 492, 366, 373, 369, 0, 0, 548,
	0, 234, 234, 527, 234, 238, 530, 234, 532, 234,
	535, 0, 0, 0, 539, 501, 545, 0, 559, 377,
	378, 380, 381, 382, 390, 0, 392, 0, 591, 0,
	-2, 0, 586, 585, 35, 42, 0, 47, 858, 859,
	121, 162, 124, 125, 0, 285, 234, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 77, 54, 55, 78,
	85, 86, 87, 0, 0, 0, 0, 438, 0, 493,
	496, 524, 260, 528, 529, 531, 533, 534, 536, 498,
	497, 0, 0, 0, 543, 561, 0, 0, 0, 0,
	0, 397, 0, 0, 400, 0, 0, 0, 0, 391,
	0, 0, 411, 393, 0, 395, 396, 0, 581, 27,
	0, 857, 0, 0, 277, 0, 287, 0, 59, 59,
	0, 0, 254, 0, 237, 240, 59, 63, 67, 292,
	370, 525, 526, 517, 500, 540, 26, 0, 0, 379,
	386, 0, 389, 398, 399, 401, 0, 403, 0, 405,
	406, 383, 384, 385, 0, 0, 0, 394, 589, -2,
	587, 45, 43, 0, 39, 0, 286, 59, 279, 280,
	63, 67, 255, 69, 69, 69, 0, 0, 0, 562,
	560, 0, 0, 402, 404, 0, 0, 0, 0, 857,
	0, 278, 60, 61, 62, 81, 0, 0, 281, 282,
	49, 50, 64, 65, 0, 51, 68, 499, 0, 0,
	0, 387, 388, 0, 0, 0, 40, 46, 0, 0,
	58, 56, 52, 53, 70, 81, 81, 0, 518, 0,
	521, 0, 415, 0, 0, 0, 57, 0, 0, 66,
	519, 412, 0, 413, 414, 41, 71, 72, 0, 416,
	0, 520,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	60, 62, 104, 102, 61, 103, 115, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 294,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1027
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1035
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1039
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1046
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1052
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1066
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1072
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1083
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1095
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1105
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1111
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1131
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1137
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1163
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.PartitionNum = yyDollar[9].optVal
			if yyDollar[2].tableSpec.Options.Type == GlobalTableType || yyDollar[2].tableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1177
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1186
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].tableSpec.Options.Type == GlobalTableType || yyDollar[2].tableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1199
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1207
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1211
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1215
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = "hash"
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = "btree"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = "default"
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1265
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1269
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1298
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1306
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1310
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1315
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1319
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1336
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1348
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1352
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1368
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1383
		{
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1385
		{
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1388
		{
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			yyVAL.str = "character set"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = "default"
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1429
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.tableSpec.Options.Type = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
			if yyVAL.tableSpec.Options.Type == "" {
				yyVAL.tableSpec.Options.Type = NormalTableType
			}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1516
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1530
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1557
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1620
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1717
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1723
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1729
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1748
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1754
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1795
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1817
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1835
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1839
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1843
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1855
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1893
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1960
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.optVal = nil
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2333
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2337
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2345
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2355
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2363
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2372
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2387
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.str = yyDollar[3].str
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2452
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2540
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2546
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, nil),
				Primary: true,
				Unique:  true,
			}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2556
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2566
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2576
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2586
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2596
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2634
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2638
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2643
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2648
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2652
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2656
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2660
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2664
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2678
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2683
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2697
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2703
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2709
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2715
		{
			yyVAL.statement = &Xa{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.statement = &Explain{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2737
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2741
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2745
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2749
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2763
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2767
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2777
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2781
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2785
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2797
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2801
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2809
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2817
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2829
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2833
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2842
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2851
		{
			yyVAL.tableName = TableName{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.str = "full "
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2881
		{
			yyVAL.showFilter = nil
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2895
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2907
		{
			yyVAL.statement = &OtherRead{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.statement = &OtherRead{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2924
		{
			setAllowComments(yylex, true)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.bytes2 = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.str = UnionStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.str = UnionAllStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.str = UnionDistinctStr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.str = SQLCacheStr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2969
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2978
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.str = StraightJoinHint
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2987
		{
			yyVAL.selectExprs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3001
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3019
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3024
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3044
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3076
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3099
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3103
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3107
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3121
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3129
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.str = JoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = JoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.str = StraightJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3160
		{
			yyVAL.str = LeftJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3164
		{
			yyVAL.str = LeftJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = RightJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3172
		{
			yyVAL.str = RightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.str = NaturalJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3182
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3192
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3211
		{
			yyVAL.indexHints = nil
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3215
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3219
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3223
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3238
		{
			yyVAL.expr = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3272
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3278
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3282
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3302
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3306
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3310
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3322
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3334
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3340
		{
			yyVAL.str = IsNullStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3344
		{
			yyVAL.str = IsNotNullStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3348
		{
			yyVAL.str = IsTrueStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3352
		{
			yyVAL.str = IsNotTrueStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.str = IsFalseStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3360
		{
			yyVAL.str = IsNotFalseStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.str = EqualStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.str = LessThanStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3374
		{
			yyVAL.str = GreaterThanStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.str = LessEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3382
		{
			yyVAL.str = GreaterEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			yyVAL.str = NotEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3399
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3409
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3419
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3425
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3429
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3435
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3495
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3511
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3519
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3527
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3541
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3545
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3549
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3567
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3571
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3575
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3597
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 499:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3609
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3613
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3617
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3692
		{
			yyVAL.str = ""
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3696
		{
			yyVAL.str = BooleanModeStr
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3700
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3704
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = QueryExpansionStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3779
		{
			yyVAL.expr = nil
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3788
		{
			yyVAL.str = string("")
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3792
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3798
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3802
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3808
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3813
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3817
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3823
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3827
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3831
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3837
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3841
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3845
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3849
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3853
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3857
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			yyVAL.expr = &NullVal{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3867
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3876
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3880
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3885
		{
			yyVAL.exprs = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3889
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3894
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3898
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3903
		{
			yyVAL.orderBy = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3907
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3917
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3923
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3928
		{
			yyVAL.str = AscScr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3932
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3936
		{
			yyVAL.str = DescScr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3941
		{
			yyVAL.limit = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3945
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3949
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3953
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3958
		{
			yyVAL.str = ""
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3962
		{
			yyVAL.str = ForUpdateStr
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3966
		{
			yyVAL.str = ShareModeStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3979
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3983
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3987
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3992
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3996
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4000
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4007
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4011
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4015
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4019
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4024
		{
			yyVAL.updateExprs = nil
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4028
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4034
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4038
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4044
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4048
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4054
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4060
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4070
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4074
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4080
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4086
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4090
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4096
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4100
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4107
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4111
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4115
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4119
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4123
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4130
		{
			yyVAL.bytes = []byte("charset")
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4136
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4140
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4144
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4150
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4154
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4160
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4164
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4170
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4174
		{
			yyVAL.str = yyDollar[2].str
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4180
		{
			yyVAL.str = yyDollar[3].str
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4186
		{
			yyVAL.str = RepeatableRead
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4190
		{
			yyVAL.str = ReadCommitted
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4194
		{
			yyVAL.str = ReadUncommitted
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4198
		{
			yyVAL.str = Serializable
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4204
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4208
		{
			yyVAL.str = yyDollar[2].str
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4214
		{
			yyVAL.str = TxReadWrite
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4218
		{
			yyVAL.str = TxReadOnly
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4224
		{
			yyVAL.str = SessionStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4228
		{
			yyVAL.str = SessionStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4232
		{
			yyVAL.str = GlobalStr
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4241
		{
			yyVAL.byt = 0
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4245
		{
			yyVAL.byt = 1
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4250
		{
			yyVAL.byt = 0
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4254
		{
			yyVAL.byt = 1
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4259
		{
			yyVAL.str = ""
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4263
		{
			yyVAL.str = IgnoreStr
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4269
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4273
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4277
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4281
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4285
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4289
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4293
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4297
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4301
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4305
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4310
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4314
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4318
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4324
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4328
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4333
		{
			yyVAL.str = IndexStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4337
		{
			yyVAL.str = UniqueStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4343
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4347
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4354
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4360
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4364
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4371
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4588
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4597
		{
			decNesting(yylex)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4602
		{
			forceEOF(yylex)
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4607
		{
			forceEOF(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4611
		{
			forceEOF(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4615
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
